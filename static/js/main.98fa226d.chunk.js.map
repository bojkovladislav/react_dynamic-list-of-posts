{"version":3,"sources":["utils/ApiRouters.ts","components/NewCommentForm.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/ErrorType.ts","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","api/users.ts","App.tsx","index.tsx"],"names":["ApiRouters","AvailableElement","PostsList","posts","handleOnPostClick","currentPostId","className","map","id","title","body","type","classNames","onClick","Loader","ErrorType","NewCommentForm","post","setComments","postId","comments","useState","name","setName","email","setEmail","comment","setComment","isFormSubmitted","setIsFormSubmitted","isLoading","setIsLoading","isNotValid","element","length","isEverythingFilled","handleChange","elementToChange","value","NAME","EMAIL","COMMENT","handleCommentAdd","e","a","preventDefault","newComment","COMMENTS","newCommentFromServer","onSubmit","htmlFor","onChange","target","placeholder","PostDetails","currentPostTitle","currentPostBody","error","showNewCommentForm","handleOnWriteACommentClick","handleCommentDelete","href","INITIAL","UserSelector","users","isSelectClicked","handleSelectButtonClick","selectRef","handleOnUserClick","currentUserName","currentUserId","ref","role","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","App","setUsers","setPosts","setError","setIsSelectClicked","setShowNewCommentForm","setCurrentUserId","setCurrentUserName","setCurrentPostId","setCurrentPostTitle","setCurrentPostBody","useRef","useEffect","USERS","usersFromServer","catch","GET","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","userId","POSTS","postsFromServer","commentsFromServer","removeComment","DELETE","filter","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.98fa226d.chunk.js","sourcesContent":["export enum ApiRouters {\n  USERS = '/users',\n  POSTS = '/posts',\n  COMMENTS = '/comments',\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { ApiRouters } from '../utils/ApiRouters';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  post: (\n    url: string,\n    data: Comment,\n  ) => Promise<Comment>;\n  postId: number | null;\n  comments: Comment[] | null;\n  setComments: (comments: Comment[]) => void;\n}\n\nenum AvailableElement {\n  NAME = 'name',\n  EMAIL = 'email',\n  COMMENT = 'comment',\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post,\n  setComments,\n  postId,\n  comments,\n}) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [comment, setComment] = useState<string>('');\n  const [isFormSubmitted, setIsFormSubmitted] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const isNotValid = (element: string) => (\n    isFormSubmitted && !element.length\n  );\n\n  const isEverythingFilled\n    = !!name.length && !!email.length && !!comment.length;\n\n  const handleChange = (elementToChange: AvailableElement, value: string) => {\n    switch (elementToChange) {\n      case AvailableElement.NAME:\n        setName(value);\n        break;\n\n      case AvailableElement.EMAIL:\n        setEmail(value);\n        break;\n\n      case AvailableElement.COMMENT:\n        setComment(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleCommentAdd = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsFormSubmitted(true);\n    const newComment = {\n      name,\n      email,\n      body: comment,\n      postId,\n    };\n\n    if (isEverythingFilled && postId) {\n      try {\n        setIsLoading(true);\n\n        const newCommentFromServer\n          = await post(ApiRouters.COMMENTS, newComment);\n\n        if (comments) {\n          setComments([...comments, newCommentFromServer]);\n        }\n\n        setIsFormSubmitted(false);\n      } catch {\n        setIsFormSubmitted(false);\n      }\n    }\n\n    setComment('');\n    setIsLoading(false);\n  };\n\n  const handleClear = () => {\n    setIsFormSubmitted(false);\n    setComment('');\n    setName('');\n    setEmail('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleCommentAdd}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={\n              (e) => handleChange(AvailableElement.NAME, e.target.value)\n            }\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': isNotValid(name) })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNotValid(name) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNotValid(name) && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            onChange={\n              (e) => handleChange(AvailableElement.EMAIL, e.target.value)\n            }\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': isNotValid(email) })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isNotValid(email) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNotValid(email) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={comment}\n            onChange={\n              (e) => handleChange(AvailableElement.COMMENT, e.target.value)\n            }\n            placeholder=\"Type comment here\"\n            className={\n              classNames(\n                'textarea',\n                { 'is-danger': isNotValid(comment) },\n              )\n            }\n          />\n        </div>\n\n        {isNotValid(comment) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={\n              classNames(\n                'button is-link',\n                { 'is-loading': isLoading && isEverythingFilled },\n              )\n            }\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[];\n  handleOnPostClick: (id: number, title: string, body: string) => void;\n  currentPostId: number | null;\n}\n\nexport const PostsList: React.FC<Props>\n  = ({\n    posts,\n    handleOnPostClick,\n    currentPostId,\n  }) => (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(({ id, title, body }) => (\n            <tr data-cy=\"Post\" key={id}>\n              <td data-cy=\"PostId\">{id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link',\n                    { 'is-light': currentPostId !== id })}\n                  onClick={() => handleOnPostClick(id, title, body)}\n                >\n                  {currentPostId === id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum ErrorType {\n  INITIAL = '',\n  GET = 'Unable to get the data',\n  POST = 'Unable to post a comment',\n  DELETE = 'Unable to delete comment',\n}\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { ErrorType } from '../utils/ErrorType';\n\ninterface Props {\n  comments: Comment[] | null;\n  setComments: (comments: Comment[]) => void;\n  error: ErrorType;\n  showNewCommentForm: boolean;\n  currentPostId: number | null;\n  currentPostTitle: string | null;\n  currentPostBody: string | null;\n  handleOnWriteACommentClick: () => void;\n  handleCommentDelete: (id: number) => void;\n  post: (\n    url: string,\n    data: Comment,\n  ) => Promise<Comment>;\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  setComments,\n  currentPostId,\n  currentPostTitle,\n  currentPostBody,\n  error,\n  showNewCommentForm,\n  handleOnWriteACommentClick,\n  handleCommentDelete,\n  post,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {currentPostTitle}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {currentPostBody}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          <p className=\"title is-4\">Comments:</p>\n\n          {comments && (\n            comments.length ? (\n              <>\n                {comments.map(({\n                  id, name, email, body,\n                }: Comment) => (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={id}\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => id && handleCommentDelete(id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {body}\n                    </div>\n                  </article>\n                ))}\n              </>\n            ) : (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )\n          )}\n          {!comments && error === ErrorType.INITIAL && <Loader />}\n          {error !== ErrorType.INITIAL && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {error}\n            </div>\n          )}\n\n          {!showNewCommentForm && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleOnWriteACommentClick}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {showNewCommentForm && (\n          <NewCommentForm\n            post={post}\n            postId={currentPostId}\n            comments={comments}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[];\n  currentUserName: string | null;\n  currentUserId: number | null;\n  selectRef?: React.LegacyRef<HTMLDivElement>;\n  handleSelectButtonClick: () => void;\n  isSelectClicked: boolean;\n  handleOnUserClick: (name: string, id: number) => void;\n}\n\nexport const UserSelector: React.FC<Props>\n  = ({\n    users,\n    isSelectClicked,\n    handleSelectButtonClick,\n    selectRef,\n    handleOnUserClick,\n    currentUserName,\n    currentUserId,\n  }) => {\n    return (\n      <div\n        data-cy=\"UserSelector\"\n        className={classNames('dropdown', { 'is-active': isSelectClicked })}\n      >\n        <div\n          ref={selectRef}\n          className=\"dropdown-trigger\"\n        >\n          <button\n            type=\"button\"\n            className=\"button\"\n            aria-haspopup=\"true\"\n            aria-controls=\"dropdown-menu\"\n            onClick={handleSelectButtonClick}\n          >\n            {!currentUserName ? (\n              <span>Choose a user</span>\n            ) : (\n              <span>{currentUserName}</span>\n            )}\n\n            <span className=\"icon is-small\">\n              <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n            </span>\n          </button>\n        </div>\n\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(({ id, name }: User) => (\n              <a\n                href={`#${id}`}\n                className={\n                  classNames('dropdown-item',\n                    { 'is-active': currentUserId === id })\n                }\n                key={id}\n                onClick={() => handleOnUserClick(name, id)}\n              >\n                {name}\n              </a>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n","import { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\ntype AvailableDataType = Post | Comment | null;\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: AvailableDataType = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Comment) => {\n    return request<T>(url, 'POST', data);\n  },\n  patch: <T>(url: string, data: Post) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport const getUsers = (url: string) => {\n  return client.get<User[]>(url);\n};\n\nexport const getPosts = (url: string, userId: number) => {\n  return client.get<Post[]>(`${url}?userId=${userId}`);\n};\n\nexport const getComments = (url: string, postId: number) => {\n  return client.get<Comment[]>(`${url}?postId=${postId}`);\n};\n\nexport const post = <T>(url: string, data: Comment) => {\n  return client.post<T>(url, data);\n};\n\nexport const removeComment = (url: string, id: number) => {\n  return client.delete(`${url}/${id}`);\n};\n","import React, { useEffect, useState, useRef } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { ApiRouters } from './utils/ApiRouters';\nimport { ErrorType } from './utils/ErrorType';\n\nimport {\n  getUsers, getPosts, getComments, post, removeComment,\n} from './api';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [error, setError] = useState<ErrorType>(ErrorType.INITIAL);\n  const [isSelectClicked, setIsSelectClicked] = useState<boolean>(false);\n  const [showNewCommentForm, setShowNewCommentForm] = useState<boolean>(false);\n  const [currentUserId, setCurrentUserId] = useState<number | null>(null);\n  const [currentUserName, setCurrentUserName] = useState<string | null>(null);\n  const [currentPostId, setCurrentPostId] = useState<number | null>(null);\n  const [currentPostTitle, setCurrentPostTitle] = useState<string | null>('');\n  const [currentPostBody, setCurrentPostBody] = useState<string | null>('');\n  const selectRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    getUsers(ApiRouters.USERS)\n      .then(usersFromServer => setUsers(usersFromServer))\n      .catch(() => setError(ErrorType.GET));\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (selectRef.current\n        && !selectRef.current.contains(event.target as Node)) {\n        setIsSelectClicked(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [selectRef]);\n\n  const handleSelectButtonClick = () => {\n    setIsSelectClicked(!isSelectClicked);\n  };\n\n  const handleOnUserClick = (name: string, id: number) => {\n    handleSelectButtonClick();\n    setCurrentUserId(id);\n    setCurrentUserName(name);\n    setPosts(null);\n    setError(ErrorType.INITIAL);\n\n    getPosts(ApiRouters.POSTS, id)\n      .then(postsFromServer => setPosts(postsFromServer))\n      .catch(() => setError(ErrorType.GET));\n  };\n\n  const handleOnWriteACommentClick = () => {\n    setShowNewCommentForm(true);\n  };\n\n  const handleCommentDelete = (id?: number) => {\n    if (!id) {\n      return;\n    }\n\n    removeComment(ApiRouters.COMMENTS, id)\n      .then(() => {\n        if (comments && error !== ErrorType.DELETE) {\n          setComments(comments?.filter(comment => comment.id !== id));\n        }\n      })\n      .catch(() => setError(ErrorType.DELETE));\n  };\n\n  const handleOnPostClick = (id: number, title: string, body: string) => {\n    setCurrentPostTitle(title);\n    setCurrentPostBody(body);\n    setCurrentPostId(id);\n    setShowNewCommentForm(false);\n    setComments(null);\n    setError(ErrorType.INITIAL);\n\n    if (currentPostId === id) {\n      setCurrentPostId(null);\n    }\n\n    getComments(ApiRouters.COMMENTS, id)\n      .then((commentsFromServer) => {\n        setComments(commentsFromServer);\n      })\n      .catch(() => setError(ErrorType.GET));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  currentUserName={currentUserName}\n                  currentUserId={currentUserId}\n                  selectRef={selectRef}\n                  handleSelectButtonClick={handleSelectButtonClick}\n                  isSelectClicked={isSelectClicked}\n                  handleOnUserClick={handleOnUserClick}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!currentUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {currentUserId && (\n                  <>\n                    {(!posts && error === ErrorType.INITIAL) && <Loader />}\n                    {posts && (\n                      <>\n                        {posts.length ? (\n                          <PostsList\n                            posts={posts}\n                            handleOnPostClick={handleOnPostClick}\n                            currentPostId={currentPostId}\n                          />\n                        ) : (\n                          <div\n                            className=\"notification is-warning\"\n                            data-cy=\"NoPostsYet\"\n                          >\n                            No posts yet\n                          </div>\n                        )}\n                      </>\n                    )}\n                  </>\n                )}\n\n                {error !== ErrorType.INITIAL && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {error}\n                  </div>\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': currentPostId },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {currentPostId && (\n                <PostDetails\n                  comments={comments}\n                  setComments={setComments}\n                  error={error}\n                  showNewCommentForm={showNewCommentForm}\n                  handleOnWriteACommentClick={handleOnWriteACommentClick}\n                  handleCommentDelete={handleCommentDelete}\n                  currentPostId={currentPostId}\n                  currentPostTitle={currentPostTitle}\n                  currentPostBody={currentPostBody}\n                  post={post}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
{"version":3,"sources":["utils/ApiTypes.ts","components/NewCommentForm.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/ErrorType.ts","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","api/users.ts","App.tsx","index.tsx"],"names":["ApiTypes","AvailableElement","PostsList","posts","handleOnPostClick","currentPostId","className","map","id","title","body","type","classNames","onClick","Loader","ErrorType","NewCommentForm","post","setComments","postId","comments","useState","name","setName","email","setEmail","comment","setComment","isFormSubmitted","setIsFormSubmitted","isLoading","setIsLoading","isNotValid","element","length","isEverythingFilled","handleChange","elementToChange","value","NAME","EMAIL","COMMENT","handleCommentAdd","e","a","preventDefault","newComment","COMMENTS","newCommentFromServer","onSubmit","htmlFor","onChange","target","placeholder","PostDetails","currentPost","error","isWriteACommentClicked","handleOnWriteACommentClick","handleCommentDelete","href","INITIAL","UserSelector","users","isSelectClicked","handleSelectButtonClick","selectRef","handleOnUserClick","currentUser","ref","role","style","backgroundColor","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","App","setUsers","setPosts","setError","setIsSelectClicked","isCommentClicked","setIsCommentClicked","setCurrentUser","setCurrentPost","useRef","useEffect","USERS","usersFromServer","catch","GET","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","userId","POSTS","postsFromServer","currPost","commentsFromServer","removeComment","DELETE","filter","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9c9d9ce9.chunk.js","sourcesContent":["export enum ApiTypes {\n  USERS = '/users',\n  POSTS = '/posts',\n  COMMENTS = '/comments',\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { ApiTypes } from '../utils/ApiTypes';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  post: (\n    url: string,\n    data: any,\n  ) => Promise<any>;\n  postId?: number;\n  comments: Comment[] | null;\n  setComments: (comments: Comment[]) => void;\n}\n\nenum AvailableElement {\n  NAME = 'name',\n  EMAIL = 'email',\n  COMMENT = 'comment',\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post,\n  setComments,\n  postId,\n  comments,\n}) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [comment, setComment] = useState<string>('');\n  const [isFormSubmitted, setIsFormSubmitted] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const isNotValid = (element: string) => (\n    isFormSubmitted && !element.length\n  );\n\n  const isEverythingFilled\n    = !!name.length && !!email.length && !!comment.length;\n\n  const handleChange = (elementToChange: AvailableElement, value: string) => {\n    switch (elementToChange) {\n      case AvailableElement.NAME:\n        setName(value);\n        break;\n\n      case AvailableElement.EMAIL:\n        setEmail(value);\n        break;\n\n      case AvailableElement.COMMENT:\n        setComment(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleCommentAdd = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsFormSubmitted(true);\n    const newComment = {\n      name,\n      email,\n      body: comment,\n      postId,\n    };\n\n    if (isEverythingFilled && postId) {\n      try {\n        setIsLoading(true);\n\n        const newCommentFromServer\n          = await post(ApiTypes.COMMENTS, newComment);\n\n        if (comments) {\n          setComments([...comments, newCommentFromServer]);\n        }\n\n        setIsFormSubmitted(false);\n      } catch {\n        setIsFormSubmitted(false);\n      }\n    }\n\n    setComment('');\n    setIsLoading(false);\n  };\n\n  const handleClear = () => {\n    setIsFormSubmitted(false);\n    setComment('');\n    setName('');\n    setEmail('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleCommentAdd}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={\n              (e) => handleChange(AvailableElement.NAME, e.target.value)\n            }\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': isNotValid(name) })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNotValid(name) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNotValid(name) && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            onChange={\n              (e) => handleChange(AvailableElement.EMAIL, e.target.value)\n            }\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': isNotValid(email) })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isNotValid(email) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNotValid(email) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={comment}\n            onChange={\n              (e) => handleChange(AvailableElement.COMMENT, e.target.value)\n            }\n            placeholder=\"Type comment here\"\n            className={\n              classNames(\n                'textarea',\n                { 'is-danger': isNotValid(comment) },\n              )\n            }\n          />\n        </div>\n\n        {isNotValid(comment) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={\n              classNames(\n                'button is-link',\n                { 'is-loading': isLoading && isEverythingFilled },\n              )\n            }\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[];\n  handleOnPostClick: (id: number, title: string, body: string) => void;\n  currentPostId?: number;\n}\n\nexport const PostsList: React.FC<Props>\n  = ({\n    posts,\n    handleOnPostClick,\n    currentPostId,\n  }) => (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(({ id, title, body }) => (\n            <tr data-cy=\"Post\" key={id}>\n              <td data-cy=\"PostId\">{id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link',\n                    { 'is-light': currentPostId !== id })}\n                  onClick={() => handleOnPostClick(id, title, body)}\n                >\n                  {currentPostId === id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum ErrorType {\n  INITIAL = '',\n  GET = 'Unable to get the data',\n  POST = 'Unable to post a comment',\n  DELETE = 'Unable to delete comment',\n}\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CurrentPost } from '../types/CurrentPost';\nimport { Comment } from '../types/Comment';\nimport { ErrorType } from '../utils/ErrorType';\n\ninterface Props {\n  comments: Comment[] | null;\n  setComments: (comments: Comment[]) => void;\n  error: ErrorType;\n  isWriteACommentClicked: boolean;\n  currentPost?: CurrentPost;\n  handleOnWriteACommentClick: () => void;\n  handleCommentDelete: (id: number) => void;\n  post: (\n    url: string,\n    data: any,\n  ) => Promise<any>;\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  setComments,\n  currentPost,\n  error,\n  isWriteACommentClicked,\n  handleOnWriteACommentClick,\n  handleCommentDelete,\n  post,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {currentPost?.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {currentPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          <p className=\"title is-4\">Comments:</p>\n\n          {comments && (\n            comments.length ? (\n              <>\n                {comments.map(({\n                  id, name, email, body,\n                }) => (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={id}\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleCommentDelete(id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {body}\n                    </div>\n                  </article>\n                ))}\n              </>\n            ) : (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )\n          )}\n          {!comments && error === ErrorType.INITIAL && <Loader />}\n          {error !== ErrorType.INITIAL && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {error}\n            </div>\n          )}\n\n          {!isWriteACommentClicked && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleOnWriteACommentClick}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWriteACommentClicked && (\n          <NewCommentForm\n            post={post}\n            postId={currentPost?.id}\n            comments={comments}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\nimport { CurrentUser } from '../types/CurrentUser';\n\ninterface Props {\n  users: User[];\n  currentUser: CurrentUser | null;\n  selectRef?: React.LegacyRef<HTMLDivElement>;\n  handleSelectButtonClick: () => void;\n  isSelectClicked: boolean;\n  handleOnUserClick: (name: string, id: number) => void;\n}\n\nexport const UserSelector: React.FC<Props>\n  = ({\n    users,\n    isSelectClicked,\n    handleSelectButtonClick,\n    selectRef,\n    handleOnUserClick,\n    currentUser,\n  }) => {\n    return (\n      <div\n        data-cy=\"UserSelector\"\n        className={classNames('dropdown', { 'is-active': isSelectClicked })}\n      >\n        <div\n          ref={selectRef}\n          className=\"dropdown-trigger\"\n        >\n          <button\n            type=\"button\"\n            className=\"button\"\n            aria-haspopup=\"true\"\n            aria-controls=\"dropdown-menu\"\n            onClick={handleSelectButtonClick}\n          >\n            {!currentUser ? (\n              <span>Choose a user</span>\n            ) : (\n              <span>{currentUser.name}</span>\n            )}\n\n            <span className=\"icon is-small\">\n              <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n            </span>\n          </button>\n        </div>\n\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(({ id, name }: User) => (\n              <a\n                href={`#${id}`}\n                className=\"dropdown-item\"\n                key={id}\n                style={\n                  { backgroundColor: currentUser?.id === id ? 'cyan' : '' }\n                }\n                onClick={() => handleOnUserClick(name, id)}\n              >\n                {name}\n              </a>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n","import { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\ntype AvailableDataType = Post | Comment | unknown | null;\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: AvailableDataType = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Comment | unknown) => {\n    return request<T>(url, 'POST', data);\n  },\n  patch: <T>(url: string, data: Post) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport const getUsers = (url: string) => {\n  return client.get<User[]>(url);\n};\n\nexport const getPosts = (url: string, userId: number) => {\n  return client.get<Post[]>(`${url}?userId=${userId}`);\n};\n\nexport const getComments = (url: string, postId: number) => {\n  return client.get<Comment[]>(`${url}?postId=${postId}`);\n};\n\nexport const post = (url: string, data: any) => {\n  return client.post<any>(url, data);\n};\n\nexport const removeComment = (url: string, id: number) => {\n  return client.delete(`${url}/${id}`);\n};\n","import React, { useEffect, useState, useRef } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { CurrentUser } from './types/CurrentUser';\nimport { CurrentPost } from './types/CurrentPost';\nimport { ApiTypes } from './utils/ApiTypes';\nimport { ErrorType } from './utils/ErrorType';\n\nimport {\n  getUsers, getPosts, getComments, post, removeComment,\n} from './api';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [error, setError] = useState<ErrorType>(ErrorType.INITIAL);\n  const [isSelectClicked, setIsSelectClicked] = useState<boolean>(false);\n  const [isCommentClicked, setIsCommentClicked] = useState<boolean>(false);\n  const [currentUser, setCurrentUser] = useState<CurrentUser | null>(null);\n  const [currentPost, setCurrentPost] = useState<CurrentPost | null>(null);\n  const selectRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    getUsers(ApiTypes.USERS)\n      .then(usersFromServer => setUsers(usersFromServer))\n      .catch(() => setError(ErrorType.GET));\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (selectRef.current\n        && !selectRef.current.contains(event.target as Node)) {\n        setIsSelectClicked(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [selectRef]);\n\n  const handleSelectButtonClick = () => {\n    setIsSelectClicked(!isSelectClicked);\n  };\n\n  const handleOnUserClick = (name: string, id: number) => {\n    handleSelectButtonClick();\n    setCurrentUser({ ...currentUser, name, id });\n    setPosts(null);\n    setError(ErrorType.INITIAL);\n\n    getPosts(ApiTypes.POSTS, id)\n      .then(postsFromServer => setPosts(postsFromServer))\n      .catch(() => setError(ErrorType.GET));\n  };\n\n  const handleOnWriteACommentClick = () => {\n    setIsCommentClicked(true);\n  };\n\n  const handleCommentDelete = (id: number) => {\n    removeComment(ApiTypes.COMMENTS, id)\n      .then(() => {\n        if (comments && error !== ErrorType.DELETE) {\n          setComments(comments?.filter(comment => comment.id !== id));\n        }\n      })\n      .catch(() => setError(ErrorType.DELETE));\n  };\n\n  const handleOnPostClick = (id: number, title: string, body: string) => {\n    setCurrentPost(currPost => ({\n      ...currPost, title, id, body,\n    }));\n    setIsCommentClicked(false);\n    setComments(null);\n    setError(ErrorType.INITIAL);\n\n    if (currentPost && currentPost.id === id) {\n      setCurrentPost(null);\n    }\n\n    getComments(ApiTypes.COMMENTS, id)\n      .then((commentsFromServer) => {\n        setComments(commentsFromServer);\n      })\n      .catch(() => setError(ErrorType.GET));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  currentUser={currentUser}\n                  selectRef={selectRef}\n                  handleSelectButtonClick={handleSelectButtonClick}\n                  isSelectClicked={isSelectClicked}\n                  handleOnUserClick={handleOnUserClick}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!currentUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {currentUser && (\n                  <>\n                    {(!posts && error === ErrorType.INITIAL) && <Loader />}\n                    {posts && (\n                      <>\n                        {posts.length ? (\n                          <PostsList\n                            posts={posts}\n                            handleOnPostClick={handleOnPostClick}\n                            currentPostId={currentPost?.id}\n                          />\n                        ) : (\n                          <div\n                            className=\"notification is-warning\"\n                            data-cy=\"NoPostsYet\"\n                          >\n                            No posts yet\n                          </div>\n                        )}\n                      </>\n                    )}\n                  </>\n                )}\n\n                {error !== ErrorType.INITIAL && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {error}\n                  </div>\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': currentPost?.id },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {currentPost && (\n                <PostDetails\n                  comments={comments}\n                  setComments={setComments}\n                  error={error}\n                  isWriteACommentClicked={isCommentClicked}\n                  handleOnWriteACommentClick={handleOnWriteACommentClick}\n                  handleCommentDelete={handleCommentDelete}\n                  currentPost={currentPost}\n                  post={post}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}